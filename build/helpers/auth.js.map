{"version":3,"sources":["../../server/helpers/auth.js"],"names":["crypto","require","jwt","jwtKey","jwtExpiry","verify","req","res","next","token","cookies","console","log","redirect","payload","e","JsonWebTokenError","status","end","signin","name","body","username","password","User","findOne","lean","user","undefined","salt","hash","createHash","update","digest","sign","algorithm","expiresIn","cookie","maxAge","createuser","buf","randomBytes","toString","create"],"mappings":";;;;;;;;;;;;;AAAA;;AACA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAME,MAAM,GAAG,iBAAf;AACA,IAAMC,SAAS,GAAG,MAAlB;;AAEO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,MAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYD,KAA1B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,MAAI,CAACA,KAAL,EAAW;AACPF,IAAAA,GAAG,CAACM,QAAJ,CAAa,YAAb;AACH;;AACD,MAAIC,OAAJ;;AACA,MAAG;AACCA,IAAAA,OAAO,GAAGZ,GAAG,CAACG,MAAJ,CAAWI,KAAX,EAAiBN,MAAjB,CAAV;AACH,GAFD,CAGA,OAAMY,CAAN,EAAQ;AACJ,QAAIA,CAAC,YAAYb,GAAG,CAACc,iBAArB,EAAuC;AACnC,aAAOT,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACH;;AACD,WAAOX,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACH;;AACDV,EAAAA,IAAI;AACP,CAjBM;;;;AAmBA,IAAMW,MAAM;AAAA,2FAAG,iBAAOb,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACZa,YAAAA,IADY,GACLd,GAAG,CAACe,IAAJ,CAASC,QADJ;AAEZC,YAAAA,QAFY,GAEDjB,GAAG,CAACe,IAAJ,CAASE,QAFR;;AAGlB,gBAAG,CAACH,IAAD,IAAS,CAACG,QAAb,EAAsB;AAClBhB,cAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACH;;AALiB;AAAA,mBAMCM,aAAKC,OAAL,CAAa;AAACL,cAAAA,IAAI,EAAJA;AAAD,aAAb,EAAqBM,IAArB,EAND;;AAAA;AAMZC,YAAAA,IANY;;AAAA,kBAOfA,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAIC,SAAxB,IAAqCD,IAAI,IAAI,EAP9B;AAAA;AAAA;AAAA;;AAQdpB,YAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AARc;;AAAA;AAWlBP,YAAAA,OAAO,CAACC,GAAR,CAAYe,IAAZ;AACAhB,YAAAA,OAAO,CAACC,GAAR,CAAYe,IAAI,CAACE,IAAjB;AACAlB,YAAAA,OAAO,CAACC,GAAR,CAAYW,QAAZ;AACAZ,YAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;AACMU,YAAAA,IAfY,GAeL9B,MAAM,CAAC+B,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCT,QAAnC,EAA6CS,MAA7C,CAAoDL,IAAI,CAACE,IAAzD,EAA+DI,MAA/D,CAAsE,KAAtE,CAfK;AAgBlBtB,YAAAA,OAAO,CAACC,GAAR,CAAYkB,IAAZ;AACAnB,YAAAA,OAAO,CAACC,GAAR,CAAYe,IAAI,CAACG,IAAjB;;AACA,gBAAGA,IAAI,IAAIH,IAAI,CAACG,IAAhB,EAAqB;AACXrB,cAAAA,KADW,GACHP,GAAG,CAACgC,IAAJ,CAAS;AAACd,gBAAAA,IAAI,EAAJA;AAAD,eAAT,EAAgBjB,MAAhB,EAAuB;AACjCgC,gBAAAA,SAAS,EAAE,OADsB;AAEjCC,gBAAAA,SAAS,EAAEhC;AAFsB,eAAvB,CADG;AAKjBG,cAAAA,GAAG,CAAC8B,MAAJ,CAAW,OAAX,EAAmB5B,KAAnB,EAA0B;AAAC6B,gBAAAA,MAAM,EAAElC,SAAS,GAAC;AAAnB,eAA1B,EAAoDS,QAApD,CAA6D,GAA7D;AACH;;AAxBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANM,MAAM;AAAA;AAAA;AAAA,GAAZ;;;;AA2BA,IAAMoB,UAAU,GAAG,SAAbA,UAAa,CAACnB,IAAD,EAAOG,QAAP,EAAoB;AAC1C,MAAMiB,GAAG,GAAGxC,MAAM,CAACyC,WAAP,CAAmB,GAAnB,CAAZ;AACA,MAAMZ,IAAI,GAAGW,GAAG,CAACE,QAAJ,CAAa,KAAb,CAAb;AACA,MAAMZ,IAAI,GAAG9B,MAAM,CAAC+B,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCT,QAAnC,EAA6CS,MAA7C,CAAoDH,IAApD,EAA0DI,MAA1D,CAAiE,KAAjE,CAAb;;AACAT,eAAKmB,MAAL,CAAY;AAACvB,IAAAA,IAAI,EAAJA,IAAD;AAAOS,IAAAA,IAAI,EAAJA,IAAP;AAAaC,IAAAA,IAAI,EAAJA;AAAb,GAAZ;AACH,CALM","sourcesContent":["import {User} from \"../models/models\";\nconst crypto = require(\"crypto\");\n\nconst jwt = require(\"jsonwebtoken\");\nconst jwtKey = \"snklvhahvnuklse\";\nconst jwtExpiry = 864000\n\nexport const verify = (req, res, next) => {\n    const token = req.cookies.token;\n    console.log(token)\n    if (!token){\n        res.redirect(\"/loginpage\");\n    }\n    var payload\n    try{\n        payload = jwt.verify(token,jwtKey);\n    }\n    catch(e){\n        if (e instanceof jwt.JsonWebTokenError){\n            return res.status(401).end();\n        }\n        return res.status(400).end();\n    }\n    next();\n}\n\nexport const signin = async (req, res) => {\n    const name = req.body.username;\n    const password = req.body.password;\n    if(!name || !password){\n        res.status(401).end();\n    }\n    const user = await User.findOne({name}).lean();\n    if(user == null || user == undefined || user == {}){\n        res.status(401).end();\n        return;\n    }\n    console.log(user);\n    console.log(user.salt);\n    console.log(password);\n    console.log(name);\n    const hash = crypto.createHash(\"sha256\").update(password).update(user.salt).digest(\"hex\");\n    console.log(hash);\n    console.log(user.hash);\n    if(hash == user.hash){\n        const token = jwt.sign({name},jwtKey,{\n            algorithm: \"HS256\",\n            expiresIn: jwtExpiry,\n        })\n        res.cookie(\"token\",token, {maxAge: jwtExpiry*1000}).redirect(\"/\");\n    }\n}\n\nexport const createuser = (name, password) => {\n    const buf = crypto.randomBytes(256);\n    const salt = buf.toString(\"hex\");\n    const hash = crypto.createHash(\"sha256\").update(password).update(salt).digest(\"hex\");\n    User.create({name, salt, hash});\n}"],"file":"auth.js"}